//////////////////////////////////////////////////////////////////////////////////
// Embedded and Ambient Systems Laboratory - FPGA measurements
// Group: M15
//		Gustavo GonÃ§alves de Sousa Forte - BU4YBL
module seg7(				//Declaration of the input and output ports used by the module
    input clk,				//Input clock signal
    input rst,				//Input reset signal
	 input [3:0] d0,			//Input operand - 4 bits wide - Represents the value showed on the first 7 segments display.
    input [3:0] d1,			//Input operand - 4 bits wide - Represents the value showed on the second 7 segments display.
	 input [3:0] d2,			//Input operand - 4 bits wide - Represents the value showed on the third 7 segments display.
    input [3:0] d3,			//Input operand - 4 bits wide - Represents the value showed on the fourth 7 segments display.
    output reg [7:0] hex_out0,	//Output operand - 4 bits wide - Represents the output value after the binary to 7 segments conversion.
    output reg [7:0] hex_out1,	//Output operand - 4 bits wide - Represents the output value after the binary to 7 segments conversion.
	 output reg [7:0] hex_out2,	//Output operand - 4 bits wide - Represents the output value after the binary to 7 segments conversion.
	 output reg [7:0] hex_out3		//Output operand - 4 bits wide - Represents the output value after the binary to 7 segments conversion.
    );

// 7-segment encoding
//      0
//     ---
//  5 |   | 1
//     --- <--6
//  4 |   | 2
//     ---
//      3

always @(posedge clk)
begin
	case (d0)					   // 7 segments display encoding conditions, depending of the "d0".
		 4'b0001 : hex_out0 = 7'b1111001;   // 1
		 4'b0010 : hex_out0 = 7'b0100100;   // 2
		 4'b0011 : hex_out0 = 7'b0110000;   // 3
		 4'b0100 : hex_out0 = 7'b0011001;   // 4
		 4'b0101 : hex_out0 = 7'b0010010;   // 5
		 4'b0110 : hex_out0 = 7'b0000010;   // 6
		 4'b0111 : hex_out0 = 7'b1111000;   // 7
		 4'b1000 : hex_out0 = 7'b0000000;   // 8
		 4'b1001 : hex_out0 = 7'b0010000;   // 9
		 4'b1010 : hex_out0 = 7'b0001000;   // A
		 4'b1011 : hex_out0 = 7'b0000011;   // b
		 4'b1100 : hex_out0 = 7'b1000110;   // C
		 4'b1101 : hex_out0 = 7'b0100001;   // d
		 4'b1110 : hex_out0 = 7'b0000110;   // E
		 4'b1111 : hex_out0 = 7'b0001110;   // F
		 default : hex_out0 = 7'b1000000;   // 0
	endcase
	
	case (d1)					   // 7 segments display encoding conditions, depending of the "d1".
		 4'b0001 : hex_out1 = 7'b1111001;   // 1
		 4'b0010 : hex_out1 = 7'b0100100;   // 2
		 4'b0011 : hex_out1 = 7'b0110000;   // 3
		 4'b0100 : hex_out1 = 7'b0011001;   // 4
		 4'b0101 : hex_out1 = 7'b0010010;   // 5
		 4'b0110 : hex_out1 = 7'b0000010;   // 6
		 4'b0111 : hex_out1 = 7'b1111000;   // 7
		 4'b1000 : hex_out1 = 7'b0000000;   // 8
		 4'b1001 : hex_out1 = 7'b0010000;   // 9
		 4'b1010 : hex_out1 = 7'b0001000;   // A
		 4'b1011 : hex_out1 = 7'b0000011;   // b
		 4'b1100 : hex_out1 = 7'b1000110;   // C
		 4'b1101 : hex_out1 = 7'b0100001;   // d
		 4'b1110 : hex_out1 = 7'b0000110;   // E
		 4'b1111 : hex_out1 = 7'b0111111;   // -
		 default : hex_out1 = 7'b1000000;   // 0
	endcase	

	case (d2)					   // 7 segments display encoding conditions, depending of the "d2".
		 4'b0001 : hex_out2 = 7'b1111001;   // 1
		 4'b0010 : hex_out2 = 7'b0100100;   // 2
		 4'b0011 : hex_out2 = 7'b0110000;   // 3
		 4'b0100 : hex_out2 = 7'b0011001;   // 4
		 4'b0101 : hex_out2 = 7'b0010010;   // 5
		 4'b0110 : hex_out2 = 7'b0000010;   // 6
		 4'b0111 : hex_out2 = 7'b1111000;   // 7
		 4'b1000 : hex_out2 = 7'b0000000;   // 8
		 4'b1001 : hex_out2 = 7'b0010000;   // 9
		 4'b1010 : hex_out2 = 7'b0001000;   // A
		 4'b1011 : hex_out2 = 7'b0000011;   // b
		 4'b1100 : hex_out2 = 7'b1000110;   // C
		 4'b1101 : hex_out2 = 7'b0100001;   // d
		 4'b1110 : hex_out2 = 7'b0000110;   // E
		 4'b1111 : hex_out2 = 7'b0001110;   // F
		 default : hex_out2 = 7'b1000000;   // 0
	endcase	
	
	case (d3)					   // 7 segments display encoding conditions, depending of the "d3".
		 4'b0001 : hex_out3 = 7'b1111001;   // 1
		 4'b0010 : hex_out3 = 7'b0100100;   // 2
		 4'b0011 : hex_out3 = 7'b0110000;   // 3
		 4'b0100 : hex_out3 = 7'b0011001;   // 4
		 4'b0101 : hex_out3 = 7'b0010010;   // 5
		 4'b0110 : hex_out3 = 7'b0000010;   // 6
		 4'b0111 : hex_out3 = 7'b1111000;   // 7
		 4'b1000 : hex_out3 = 7'b0000000;   // 8
		 4'b1001 : hex_out3 = 7'b0010000;   // 9
		 4'b1010 : hex_out3 = 7'b0001000;   // A
		 4'b1011 : hex_out3 = 7'b0000011;   // b
		 4'b1100 : hex_out3 = 7'b1000110;   // C
		 4'b1101 : hex_out3 = 7'b0100001;   // d
		 4'b1110 : hex_out3 = 7'b0000110;   // E
		 4'b1111 : hex_out3 = 7'b0001110;   // F
		 default : hex_out3 = 7'b1000000;   // 0
	endcase	
end
endmodule