module ula_3bits(
	input clk,					//Input operand - clock signal
	input rst,					//Input operand - reset signal
	input [5:0] SW,			//Input switches
	input	[3:0] KEY,					//Input operand - 1 bit wide
	output reg [2:0] LEDG,					//Input operand - 3 bit wide
	output reg [8:0] disp0,		//Output operand - 4 bits wide 
	output reg [8:0] disp1, 		//Output operand - 4 bits wide
	output reg [3:0] disp2, 		//Output operand - 4 bits wide
	output reg [3:0] disp3, 		//Output operand - 4 bits wide
	output [7:0] HEX0,		//Output operand - 7 bits wide - 7 segments display
	output [7:0] HEX1,		//Output operand - 7 bits wide - 7 segments display
	output [7:0] HEX2,		//Output operand - 7 bits wide - 7 segments display
	output [7:0] HEX3			//Output operand - 7 bits wide - 7 segments display
);

//Data RAM
reg we_d;
reg [7:0] data;
reg addr_d;
wire [7:0] out_dram;	//Transition operand - Connected to the Data RAM output

//Program ROM
reg [3:0] addr_p;
wire [3:0] out_prom;	//Transition operand - Connected to the Program ROM output

//Other
reg [2:0] pc;
wire [3:0] a;
wire [3:0] b;
wire [3:0] out_somador;	//Transition operand - Connected to the adder output		
wire sinal;
wire [3:0] out_subtrator;	//Transition operand - Connected to the adder output	
wire [8:0] out_mult;		//Transition operand - Connected to the multiplication output	
wire [3:0] out_op_and;	//Transition operand - Connected to the op_and output		
wire [3:0] out_op_or;	//Transition operand - Connected to the op_or output		
wire [3:0] out_op_xor;	//Transition operand - Connected to the op_xor output
wire [8:0] out_div;	//Transition operand - Connected to the div output

program_rom prominstance(
		.addr_p(addr_p),
		.clk(clk),
		.out_prom(out_prom)
	  );
	  
data_ram draminstance(
	   .data(data),
		.addr_d(addr_d),
		.we_d(we_d),
		.clk(clk),
		.out_dram(out_dram)
	  );
	  
somador somadorinstance (		//Adder module instantiation
    .a(out_dram[7:4]),							//Relation between the "a" input from the calctop and the "a" input of the adder module.
    .b(out_dram[3:0]),							//Relation between the "b" input from the calctop and the "b" input of the adder module.					 
    .out(out_somador)			//Relation between the "out" output of the calctop and the "out_adder" output of the adder module.
    );

subtrator subtratorinstance (		//Adder module instantiation
    .a(out_dram[7:4]),							//Relation between the "a" input from the calctop and the "a" input of the adder module.
    .b(out_dram[3:0]),							//Relation between the "b" input from the calctop and the "b" input of the adder module.					 
    .s(sinal),
	 .out(out_subtrator)			//Relation between the "out" output of the calctop and the "out_adder" output of the adder module.
    );	 
	 
mult multinstance (			//Multiplication module instantiation
    .a(out_dram[7:4]),						//Relation between the "a" input from the calctop and the "a" input of the adder module.
    .b(out_dram[3:0]),
	 .out(out_mult)			//Relation between the "out" output of the calctop and the "out_adder" output of the adder module.
    );
	 
op_and op_andinstance (		//AND module instantiation
    .a(out_dram[7:4]),						//Relation between the "a" input from the calctop and the "a" input of the adder module.
    .b(out_dram[3:0]),						//Relation between the "b" input from the calctop and the "b" input of the adder module.					 
    .out(out_op_and)			//Relation between the "out" output of the calctop and the "out_adder" output of the adder module.
    );
	 
op_or op_orinstance (		//OR module instantiation
    .a(out_dram[7:4]),						//Relation between the "a" input from the calctop and the "a" input of the adder module.
    .b(out_dram[3:0]),						//Relation between the "b" input from the calctop and the "b" input of the adder module.					 
    .out(out_op_or)			//Relation between the "out" output of the calctop and the "out_adder" output of the adder module.
    );

op_xor op_xorinstance (		//XOR module instantiation
    .a(out_dram[7:4]),						//Relation between the "a" input from the calctop and the "a" input of the adder module.
    .b(out_dram[3:0]),						//Relation between the "b" input from the calctop and the "b" input of the adder module.					 
    .out(out_op_xor)			//Relation between the "out" output of the calctop and the "out_adder" output of the adder module.
    );	

div divinstance (		//XOR module instantiation
    .a(out_dram[7:4]),						//Relation between the "a" input from the calctop and the "a" input of the adder module.
    .b(out_dram[3:0]),						//Relation between the "b" input from the calctop and the "b" input of the adder module.					 
    .out(out_div)			//Relation between the "out" output of the calctop and the "out_adder" output of the adder module.
    );	
	 
seg7 seg7instance (			//7 segments display module instantiation
    .clk(clk), 				//Relation between the "clk" input from the calctop and the "clk" input of the seg7 module.		
    .rst(rst), 				//Relation between the "rst" input from the calctop and the "rst" input of the seg7 module.
    .d0(disp0), 				//Relation the d0 7 segments display and the output, on this the 4 less significant bits of the output will be showed.
    .d1(disp1), 				//Relation the d1 7 segments display and the output, on this the 4 most significant bits of the output will be showed.
    .d2(disp2), 				//Relation the d2 7 segments display and the output, on this the 4 less significant bits of the output will be showed.
    .d3(disp3), 			   //Relation the d3 7 segments display and the output, on this the 4 less significant bits of the output will be showed.
    .hex_out0(HEX0),
	 .hex_out1(HEX1),			 
	 .hex_out2(HEX2),			
	 .hex_out3(HEX3)
    );

	 
assign a[2:0] = SW[2:0];
assign b[2:0] = SW[5:3];

always @(clk)
begin
	addr_p = pc;
	case(out_prom)				   //Selects the output of the ALU
		 4'b0001:				//Somador
			begin
				disp1 = out_somador/10;
				disp0 = out_somador%10;
			end
		 4'b0010:				//Subtrator
		 	begin
				case(sinal)
					1'b1: disp1 <= 4'b1111;
					default: disp1 <= out_subtrator/10;
				endcase
				disp0 <= out_subtrator%10;
			end
		 4'b0011:				//Multiplication
			begin
				disp1 <= out_mult/10;
				disp0 <= out_mult%10;/*
				we_d = 0;
				addr_d = 0;
				disp1 = out_dram[3:0]; //out_dram[3:0];
				disp0 = out_dram[7:4]; //out_dram[7:4];*/
			end
		 4'b0100:				//AND
			begin
				disp1 <= out_op_and/10;
				disp0 <= out_op_and%10;
			end
		 4'b0101:				//OR
			begin
				disp1 <= out_op_or/10;
				disp0 <= out_op_or%10;
			end
		 4'b0110:				//XOR
			begin
				disp1 <= out_op_xor/10;
				disp0 <= out_op_xor%10;
			end
		 4'b0111:				//DIV
			begin
			if (b==0)
				begin
					disp1 = 9;
					disp0 = 9;
				end
			else
				begin
					disp1 <= out_div/10;
					disp0 <= out_div%10;
				end
			end
		 default:
			begin
				disp1 <= 7'b0000110;
				disp0 <= 7'b0101111;
			end
	endcase
	
	if(~KEY[2])
	begin
		addr_d = 0;
		data = (b << 4) | a;
		we_d = 1;
	end
	else
		we_d = 0;
		
	disp3 <= out_dram[7:4];
	disp2 <= out_dram[3:0];
end

always @(negedge KEY[3]) //Armazenar operacoes
begin
	pc = pc + 1;
	if(pc >= 4)
		pc = 0;
	LEDG = pc;
end

/*always @(posedge clk) //Armazenar operandos na memoria
begin
	if(~KEY[2])
	begin
		addr = 4'hE;
		data = a;
		we = 1;
	end
end*/

/*always @(*)
begin
	if(~KEY[2])
	begin
		addr = 4'hF;
		data = b;
		we = 1;
	end
end*/

endmodule